
type User {
  id: ID!
  name: String!
  email: String!
  articles: [Article!]! @hasMany
}

type Article {
  id: ID!
  title: String!
  content: String!
  author: User! @belongsTo(relation: "user")
}

type Query {
  user(id: ID! @eq): User @find
  users: [User!]! @paginate
  article(id: ID! @eq): Article @find
  articles: [Article!]! @paginate
  # articles(search: String @search): [Article!]! @paginate
  me: User @auth(guard: "api")
}

type Mutation {
  createUser(
    name: String!
    email: String! @rules(apply: ["email", "unique:users"])
    password: String! @bcrypt @rules(apply: ["min:6"])
  ): User @create

  login(
    email: String! 
    password: String!
  ): String @field(resolver: "AuthMutator@resolve")

  createArticle(title: String!, content: String!): Article 
    @field(resolver: "ArticleMutator@create")
    @middleware(checks: ["auth:api"])

    deleteArticle(id : ID!): Article @delete

    updateArticle(id : ID!, title : String, content : String): Article @update
}

type PaginatorInfo {
  count: Int! @count(model: "count")
  currentPage: Int!
  firstItem: Int!
  hasMorePages: Boolean!
  lastItem: Int!
  lastPage: Int!
  perPage: Int!
  total: Int!
}